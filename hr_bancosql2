CREATE TABLE my_employees(
    employee_id NUMBER(3) NOT NULL,
    first_name VARCHAR2(50) DEFAULT 'No name',
    last_name VARCHAR2(50),
    hire_date DATE DEFAULT sysdate NOT NULL
)

SELECT * FROM my_employees;

ALTER TABLE my_employees
ADD phone_number VARCHAR(20); 

ALTER TABLE my_employees
MODIFY phone_number VARCHAR(30);

ALTER TABLE my_employees
DROP COLUMN phone_number;

--DROP TABLE
DROP TABLE my_employees;
FLASHBACK TABLE my_employees TO BEFORE DROP;

/*o FLASHBACK não funcionará se no momento do drop, tiver o PURGE (EX. DROP TABLE my_employees PURGE), 
pois será excluído permanentemente*/

--RENAME 
ALTER TABLE my_employees 
RENAME COLUMN hire_date TO start_date;

--Renomear tabela
RENAME my_employees TO all_employees;

SELECT * FROM all_employees;

INSERT INTO all_employees values (12, 'Marcos', 'Vinicius', sysdate);
INSERT INTO  all_employees values (13, 'Marcos', 'Silva', sysdate);
select * from all_employees;


DELETE all_employees WHERE employee_id = 12;
COMMIT;
ROLLBACK;


--Constraints
SELECT * FROM employees;

-- NOT NULL
-- UNIQUE

--PRIMARY KEY
CREATE TABLE directors(
    director_id NUMBER CONSTRAINT dir_did_pk PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);

SELECT * FROM DIRECTORS ;

ALTER TABLE directors
DROP COLUMN id_dir;

ALTER TABLE directors
ADD id_dir NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY;

INSERT INTO directors (first_name, last_name) VALUES ('Julius', 'Rock');

CREATE TABLE empregado (
    id_emp NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    id_dir INT,
    FOREIGN KEY (id_dir) REFERENCES directors(id_dir) 
);

DROP TABLE empregado;

INSERT INTO empregado(id_dir, first_name, last_name)
VALUES(1, 'Kyll', 'Trovão');

SELECT * FROM empregado;
SELECT * FROM DIRECTORS ;

SELECT id_emp, e.first_name, e.last_name, d.id_dir AS "ID Diretor", d.first_name AS "Nome do Diretor"
FROM empregado e
JOIN directors d
        ON d.id_dir = e.id_dir; 

--VIEW
CREATE VIEW empview90 AS
SELECT * FROM employees WHERE department_id = 90;

SELECT * FROM empview90;

SELECT * FROM empview90 WHERE salary <20000;


CREATE VIEW emp_cx_vw (DNAME, MIN_SAL, MAX_SAL)AS 
    SELECT DISTINCT UPPER(department_name), MIN(salary), MAX(salary)
    FROM employees e JOIN departments d
    USING (department_id)
    GROUP BY department_name;
    
SELECT * FROM emp_cx_vw;    

--MODIFY A VIEW
CREATE OR REPLACE VIEW empvw30 AS
SELECT employee_id e_id, first_name name, last_name surname, job_id FROM employees
WHERE department_id =30;

select * from empvw30;    

--DML View
CREATE OR REPLACE VIEW empvw60 AS
SELECT employee_id, first_name, last_name, email, hire_date, job_id, department_id
FROM employees
WHERE department_id =60;

INSERT INTO empvw60 VALUES (1450, 'ALex','Hummel','AHUMMEL@g.com',sysdate, 'IT_PROG',60);
UPDATE empvw60 SET job_id ='SA_MAN' WHERE employee_id=1450;
DELETE FROM empvw60;


--WITH READ ONLY
CREATE OR REPLACE VIEW empvw30 AS
SELECT employee_id e_id, first_name name, last_name surname, job_id FROM employees
WHERE department_id =30
WITH READ ONLY;


--drop view
DROP VIEW empvw60;
 
--SEQUENCE
CREATE SEQUENCE employee_seq
START WITH 100
INCREMENT BY 3
MAXVALUE 9999
CACHE 30
NOCYCLE;

--ALTER SEQUENCE
ALTER SEQUENCE employee_seq
INCREMENT BY 1
MAXVALUE 99999
CACHE 30
NOCYCLE;

--DROP SEQUENCE
DROP SEQUENCE employee_seq;


--USING SEQUENCE
--NEXTVAL retorna o próx valor da sequence
--CURRVAL retorna o valor atual da sequence

select employee_seq.NEXTVAL FROM dual;
select employee_seq.CURRVAL FROM dual;

INSERT INTO all_employees (employee_id, last_name, first_name)
VALUES(employee_seq.nextval, 'SMith', 'aaron');

select * from all_employees; 


